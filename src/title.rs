use bevy::{prelude::*, sprite::Mesh2dHandle};
use bevy_debug_text_overlay::screen_print;

use crate::GameState;

pub struct TitlePlugin;

impl Plugin for TitlePlugin {
    fn build(&self, app: &mut App) {
        // FIXME
        app.add_systems(OnEnter(GameState::Title), title_setup);
        app.add_systems(Update, title_system.run_if(in_state(GameState::Title)));
        app.add_systems(Update, splash_drops.run_if(in_state(GameState::Main)));
    }
}

#[derive(Component)]
struct TitleDrop;

// fn title_system(
//     mut commands: Commands,
//     buttons: Res<Input<MouseButton>>,
//     mut title_res: ResMut<TitleRes>,
//     mut meshes: ResMut<Assets<Mesh>>,
//     mut color_materials: ResMut<Assets<ColorMaterial>>,
//     mouse_pos: Option<Res<MouseWorldPos>>,
//     mut timer: Local<Option<Timer>>,
//     time: Res<Time>,
//     transform: Query<&Transform>,
// ) {
//     let timer = timer
//         .get_or_insert_with(|| Timer::from_seconds(0.1, TimerMode::Repeating))
//         .tick(time.delta());

//     debug!("title_system {timer:?}");
//     if let Some(mouse_pos) = mouse_pos {
//         if buttons.pressed(MouseButton::Right) && timer.just_finished() {
//             debug!("pressed {:?}", mouse_pos.0);
//             let id = commands
//                 .spawn(ColorMesh2dBundle {
//                     mesh: Mesh2dHandle(
//                         meshes.add(
//                             shape::Circle {
//                                 radius: 6.0,
//                                 vertices: 6,
//                             }
//                             .into(),
//                         ),
//                     ),
//                     material: color_materials.add(ColorMaterial::from(Color::CYAN)),
//                     transform: Transform::from_translation(mouse_pos.0.extend(0.)),
//                     ..default()
//                 })
//                 .id();
//             title_res.drops.push(id);
//         }
//     }
//     if buttons.just_pressed(MouseButton::Left) {
//         let pos = title_res
//             .drops
//             .iter()
//             .map(|&e| transform.get(e).unwrap())
//             .collect::<Vec<_>>();
//         let mut file = File::create("title.txt").unwrap();
//         for t in pos.into_iter() {
//             writeln!(file, "[{}, {}],", t.translation.x, t.translation.y).unwrap();
//         }

//         commands.remove_resource::<TitleRes>();
//     }
// }

#[derive(Component)]
pub struct TitleRoot;

fn title_setup(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut color_materials: ResMut<Assets<ColorMaterial>>,
) {
    let drop_pos = vec![
        [-244., 123.99999],
        [-244., 110.],
        [-242.99998, 100.000015],
        [-242.99998, 90.999985],
        [-242.99998, 77.],
        [-242.99998, 66.00001],
        [-244., 57.000015],
        [-244., 48.99999],
        [-244., 46.999992],
        [-236.99998, 123.99999],
        [-233., 123.99999],
        [-228., 124.999985],
        [-219., 124.999985],
        [-211.00002, 123.99999],
        [-208., 122.99999],
        [-205., 116.99999],
        [-203., 111.],
        [-202., 105.00001],
        [-203., 94.000015],
        [-209.99998, 89.999985],
        [-215.99998, 86.999985],
        [-225., 86.999985],
        [-232.00002, 85.99999],
        [-236.00002, 85.99999],
        [-217.99998, 83.99999],
        [-215.00002, 77.],
        [-209.99998, 69.00001],
        [-204., 60.000015],
        [-199., 49.99999],
        [-199., 48.99999],
        [-170., 104.00001],
        [-156., 103.00001],
        [-149., 103.00001],
        [-140.00002, 102.00001],
        [-133.99998, 98.000015],
        [-132., 85.99999],
        [-132., 71.],
        [-132., 60.000015],
        [-132., 53.999985],
        [-132., 46.999992],
        [-132., 49.99999],
        [-141.00002, 79.99999],
        [-148., 80.99999],
        [-157., 80.99999],
        [-164.00002, 77.],
        [-168., 73.],
        [-169., 67.00001],
        [-170., 57.000015],
        [-164.00002, 49.99999],
        [-150., 47.99999],
        [-139.00002, 53.999985],
        [-132., 59.000015],
        [-105.99999, 102.00001],
        [-106.99999, 90.999985],
        [-106.99999, 78.],
        [-106.99999, 65.00001],
        [-107.99999, 52.999985],
        [-107.99999, 50.99999],
        [-102., 125.999985],
        [-104., 125.999985],
        [-105.99999, 125.999985],
        [-74., 105.00001],
        [-74., 98.000015],
        [-74., 83.99999],
        [-74., 73.],
        [-74., 62.00001],
        [-74., 52.999985],
        [-74., 49.99999],
        [-74., 49.99999],
        [-74., 55.99998],
        [-68.00001, 95.000015],
        [-64.00001, 98.000015],
        [-56.999992, 101.00001],
        [-52.999996, 102.00001],
        [-47.000004, 102.00001],
        [-42.000008, 102.00001],
        [-36.99999, 100.000015],
        [-31.999992, 96.000015],
        [-28.999996, 88.999985],
        [-27.999996, 81.99999],
        [-26.999998, 72.],
        [-26.999998, 64.00001],
        [-26.999998, 55.99998],
        [-26.999998, 52.999985],
        [-8.999991, 106.00001],
        [-6.9999933, 106.00001],
        [5.000019, 105.00001],
        [9.99999, 105.00001],
        [15.00001, 105.00001],
        [15.00001, 105.00001],
        [5.000019, 116.],
        [5.000019, 107.00001],
        [5.000019, 99.000015],
        [3.9999962, 91.999985],
        [3.000021, 81.99999],
        [3.000021, 75.],
        [3.9999962, 68.00001],
        [5.000019, 61.000015],
        [7.9999924, 52.999985],
        [13.999987, 48.99999],
        [19.99998, 48.99999],
        [21.999979, 48.99999],
        [44.99998, 97.000015],
        [44.99998, 79.99999],
        [44.99998, 63.00001],
        [42.999985, 52.999985],
        [42.999985, 50.99999],
        [42.999985, 48.99999],
        [42.000008, 132.00002],
        [42.000008, 128.99998],
        [42.000008, 127.999985],
        [42.000008, 127.999985],
        [59.999992, 108.00001],
        [75., 106.00001],
        [84.99999, 105.00001],
        [90.999985, 105.00001],
        [90.999985, 105.00001],
        [77., 120.99999],
        [77., 105.00001],
        [77., 91.999985],
        [77., 81.99999],
        [77., 74.],
        [78.00002, 64.00001],
        [80.000015, 59.000015],
        [84.000015, 54.999985],
        [92.00001, 53.999985],
        [100., 53.999985],
        // [117.00001, 109.],
        [119.00001, 87.999985],
        [119.00001, 75.00001],
        [119.00001, 65.00001],
        [119.00001, 49.99999],
        [119.00001, 44.999992],
        [117.999985, 44.999992],
        [115.999985, 124.999985],
        [115.999985, 127.999985],
        [115.999985, 127.999985],
        [150., 82.99999],
        [159.00002, 81.99999],
        [178.00002, 79.],
        [184.99998, 79.],
        [186.99998, 79.],
        [188.00002, 86.999985],
        [184.99998, 97.000015],
        [179., 103.00001],
        [165.00002, 101.00001],
        [158., 100.000015],
        [151.00003, 96.000015],
        [148.99997, 85.99999],
        [148.99997, 70.00001],
        [154., 62.00001],
        [161.00002, 53.999985],
        [171., 52.999985],
        [179., 52.999985],
        [186.99998, 52.999985],
        [244.99998, 105.00001],
        [238.00002, 107.00001],
        [225., 109.],
        [217., 104.00001],
        [211.99998, 95.000015],
        [213.00002, 82.99999],
        [223.99997, 77.],
        [234.00002, 76.],
        [242.99998, 73.],
        [246.99998, 71.],
        [248., 65.00001],
        [248., 58.000015],
        [244.99998, 52.999985],
        [236.00002, 49.99999],
        [225., 49.99999],
        [221., 50.99999],
        [213.00002, 53.999985],
        [211.99998, 55.99998],
        [-59.999992, -66.00001],
        [-48., -67.00001],
        [-35.99999, -69.00001],
        [-27.999996, -71.],
        [-17.000008, -75.],
        [-10.9999895, -81.99999],
        [-8.999991, -92.],
        [-7.9999924, -98.99999],
        [-7.9999924, -110.],
        [-7.9999924, -115.],
        [-7.9999924, -118.99999],
        [-6.9999933, -123.00001],
        [-5.9999943, -125.00001],
        [-17.000008, -131.],
        [-28.999996, -132.],
        [-31.999992, -132.],
        [-36.99999, -134.],
        [-40.000008, -137.],
        [-46.000004, -141.00002],
        [-50., -147.],
        [-52., -152.],
        [-54.999996, -158.99998],
        [-56.999992, -169.],
        [-59.999992, -184.],
        [-59.999992, -193.],
        [-59.999992, -206.],
        [-59.999992, -222.],
        [-57.999992, -233.],
        [-57.999992, -242.],
        [-55.999992, -251.00002],
        [-51., -257.],
        [-38.00001, -264.],
        [-26., -269.],
        [-10.9999895, -272.],
        [1.0000229, -272.],
        [7.9999924, -272.],
        [17.000008, -269.],
        [25., -258.],
        [28.000021, -247.],
        [32.000015, -235.99998],
        [36.000015, -225.],
        [36.000015, -216.00002],
        [36.000015, -206.],
        [36.000015, -194.],
        [36.000015, -183.],
        [36.000015, -172.],
        [34.999992, -162.99998],
        [32.999992, -155.],
        [30.00002, -149.],
        [23.999977, -144.],
        [15.999985, -141.00002],
        [11.999989, -139.99998],
        [3.000021, -138.],
        [-4.999995, -138.],
        [-8.999991, -137.],
        [-57.999992, -202.],
        [-57.999992, -202.],
        [-43.000008, -203.],
        [-30.999994, -204.],
        [-22.000004, -205.],
        [-22.000004, -205.],
        [-20.000004, -205.],
        [-17.000008, -139.99998],
        [-17.000008, -143.],
        [-17.000008, -152.],
        [-17.000008, -163.99998],
        [-17.000008, -176.00002],
        [-17.000008, -185.],
        [-17.000008, -192.],
        [-16.000008, -194.],
        [-28.999996, -143.],
        [-39.00001, -147.],
        [-46.000004, -157.],
        [-52., -172.],
        [-52., -175.00002],
        [-41.000008, -167.],
        [-26.999998, -148.],
        [-26., -148.],
        [-29.999996, -158.99998],
        [-41.000008, -181.],
        [-44.000008, -187.],
        [-45.000004, -190.],
        [-45.000004, -190.],
        [-29.999996, -186.],
        [-22.000004, -174.00002],
        [-19.000006, -172.],
        [-22.000004, -187.],
        [-24., -193.],
        [-25., -195.99998],
        [-28.999996, -196.99998],
        [-33.999992, -195.99998],
    ];
    let mesh = Mesh2dHandle(
        meshes.add(
            shape::Circle {
                radius: 6.0,
                vertices: 6,
            }
            .into(),
        ),
    );
    let material = color_materials.add(ColorMaterial::from(Color::CYAN));

    let root = commands.spawn((
        Name::new("Title root"),
        TitleRoot,
        SpatialBundle::default(),
    )).id();

    for pos in drop_pos {
        commands
            .spawn(ColorMesh2dBundle {
                mesh: mesh.clone(),
                material: material.clone(),
                transform: Transform::from_translation(Vec2::from(pos).extend(1.)),
                ..default()
            })
            .insert(TitleDrop)
            .set_parent(root);
    }
}

fn title_system(mut state: ResMut<NextState<GameState>>, buttons: Res<Input<MouseButton>>) {
    if buttons.just_pressed(MouseButton::Left) {
        // screen_print!("Start game");
        state.set(GameState::Main);
    }
}

fn splash_drops(
    mut commands: Commands,
    mut drops: Query<(Entity, &mut Transform), With<TitleDrop>>,
    time: Res<Time>,
) {
    for (entity, mut tf) in &mut drops {
        assert_ne!(tf.translation, Vec3::ZERO);
        tf.translation = tf.translation + tf.translation.normalize() * time.delta_seconds() * 1000.;

        if tf.translation.length() > 1000. {
            commands.entity(entity).despawn();
        }
    }
}
